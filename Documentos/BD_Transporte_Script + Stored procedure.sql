/* DROP DATABASE BD_Transporte */

CREATE DATABASE BD_Transporte
GO
USE BD_Transporte
GO

CREATE TABLE BOLETO (
    COD_BOL int  NOT NULL IDENTITY,
    FEC_BOL date   NULL,
    NUM_ASIE varchar(2)   NULL,
    EST_BOL varchar(1)  NULL,
    COD_PASJ int  NOT NULL,
    COD_RUTA int  NOT NULL,
    COD_BUS int  NOT NULL,
    CONSTRAINT BOLETO_pk PRIMARY KEY  (COD_BOL)
);
GO

-- Table: BUS
CREATE TABLE BUS (
    COD_BUS int  NOT NULL IDENTITY,
    PLACA_BUS varchar(7)  NOT NULL,
    NASIENTO varchar(2)  NOT NULL,
    EST_BUS varchar(1) NOT NULL,
    CONSTRAINT BUS_pk PRIMARY KEY  (COD_BUS)
);
GO

-- Table: PASAJERO
CREATE TABLE PASAJERO (
    COD_PASJ int  NOT NULL IDENTITY,
    DNI_PASJ varchar(8)   NULL,
    FECNAC_PASJ date   NULL,
    NOM_PASJ varchar(200)   NULL,
    EST_PASJ varchar(1)  NULL,
    CONSTRAINT PASAJERO_pk PRIMARY KEY  (COD_PASJ)
);
GO

-- Table: RUTAS
CREATE TABLE RUTAS (
    COD_RUTA int  NOT NULL IDENTITY,
    ORI_RUTA varchar(200)   NULL,
    DES_RUTA varchar(200)   NULL,
    COS_RUTA varchar(2)   NULL,
    EST_RUTA varchar(1)  NULL,
    CONSTRAINT RUTAS_pk PRIMARY KEY  (COD_RUTA)
);
GO

-- Table: SUCURSALES
CREATE TABLE SUCURSALES (
    COD_SUC int  NOT NULL IDENTITY,
    NOM_SUC varchar(200)   NULL,
    EST_SUC varchar(1)  NULL,
    CONSTRAINT SUCURSALES_pk PRIMARY KEY  (COD_SUC)
);
GO

-- foreign keys
-- Reference: BOLETO_BUS (table: BOLETO)
ALTER TABLE BOLETO ADD CONSTRAINT BOLETO_BUS
    FOREIGN KEY (COD_BUS)
    REFERENCES BUS (COD_BUS);
GO

-- Reference: BOLETO_PASAJERO (table: BOLETO)
ALTER TABLE BOLETO ADD CONSTRAINT BOLETO_PASAJERO
    FOREIGN KEY (COD_PASJ)
    REFERENCES PASAJERO (COD_PASJ);
GO

-- Reference: BOLETO_RUTAS (table: BOLETO)
ALTER TABLE BOLETO ADD CONSTRAINT BOLETO_RUTAS
    FOREIGN KEY (COD_RUTA)
    REFERENCES RUTAS (COD_RUTA);
GO

INSERT INTO PASAJERO(NOM_PASJ, DNI_PASJ, FECNAC_PASJ, EST_PASJ) VALUES('DANIEL QUISPE','76806031','01/31/2000','A');
INSERT INTO PASAJERO(NOM_PASJ, DNI_PASJ, FECNAC_PASJ, EST_PASJ) VALUES('KARLA PEÑA','75852369','04/05/2000','A');
INSERT INTO PASAJERO(NOM_PASJ, DNI_PASJ, FECNAC_PASJ, EST_PASJ) VALUES('ARMANDO CASAS','12536965','06/08/1999','A');
INSERT INTO PASAJERO(NOM_PASJ, DNI_PASJ, FECNAC_PASJ, EST_PASJ) VALUES('PEPITO PEREZ','12365485','02/03/1997','A');
INSERT INTO PASAJERO(NOM_PASJ, DNI_PASJ, FECNAC_PASJ, EST_PASJ) VALUES('GABRIELA RODRIGUEZ','75856965','04/05/1999','A');

INSERT INTO SUCURSALES(NOM_SUC, EST_SUC) VALUES('LIMA','A');
INSERT INTO SUCURSALES(NOM_SUC, EST_SUC) VALUES('CAÑETE','A');
INSERT INTO SUCURSALES(NOM_SUC, EST_SUC) VALUES('CHINCHA','A');
INSERT INTO SUCURSALES(NOM_SUC, EST_SUC) VALUES('PISCO','A');
INSERT INTO SUCURSALES(NOM_SUC, EST_SUC) VALUES('ICA','A');
GO

--end file

--STORED PROCEDURE


/* INSERTA LOS DATOS DEL PASAJERO EN LA BASE DE DATOS */
CREATE PROCEDURE SP_InsertPasajero
@NOM_PASJ VARCHAR(200),
@DNI_PASJ VARCHAR(8),
@FECNAC_PASJ VARCHAR(10),
@EST_PASJ VARCHAR(1)
AS
	BEGIN
		IF(SELECT DNI_PASJ FROM PASAJERO WHERE DNI_PASJ = @DNI_PASJ) IS NOT NULL
			SELECT 'DNI EXISTE' AS 'RESULTADO'
		ELSE
			INSERT INTO PASAJERO(NOM_PASJ,DNI_PASJ,FECNAC_PASJ,EST_PASJ)
			VALUES(UPPER(@NOM_PASJ),@DNI_PASJ,CONVERT(DATE, @FECNAC_PASJ, 103),@EST_PASJ)
	END
GO

/* MODIFICA LOS DATOS REGISTRADOS DEL PASAJERO EN LA BASE DE DATOS */
CREATE PROCEDURE SP_UpdatePasajero
@COD_PASJ INT,
@NOM_PASJ VARCHAR(200),
@DNI_PASJ VARCHAR(8),
@FECNAC_PASJ VARCHAR(10)
AS
	BEGIN
		UPDATE PASAJERO SET
		NOM_PASJ=UPPER(@NOM_PASJ),DNI_PASJ=@DNI_PASJ,FECNAC_PASJ=CONVERT(DATE, @FECNAC_PASJ, 103) WHERE COD_PASJ=@COD_PASJ
	END
GO

/* INACTIVA AL PASAJERO */
CREATE PROCEDURE SP_DeletePasajero
@COD_PASJ INT
AS
	BEGIN
	UPDATE PASAJERO SET EST_PASJ='I'
	WHERE COD_PASJ=@COD_PASJ
	END
GO

/* PERMITE VER EL LISTADO DE LOS PASAJEROS ACTIVOS */
CREATE PROCEDURE SP_ListPasajero
AS
	BEGIN
		SELECT COD_PASJ,NOM_PASJ,DNI_PASJ,FORMAT(FECNAC_PASJ, 'dd/MM/yyyy') AS 'FECNAC_PASJ' FROM PASAJERO
		WHERE EST_PASJ LIKE 'A'
		ORDER BY COD_PASJ DESC
	END
GO

/* INSERTA LOS DATOS DEL BUS EN LA BASE DE DATOS */
CREATE PROCEDURE SP_InsertBus
@PLACA_BUS VARCHAR(7),
@NASIENTO VARCHAR(2),
@EST_BUS VARCHAR(1)
AS
	BEGIN
		IF(SELECT PLACA_BUS FROM BUS WHERE PLACA_BUS = @PLACA_BUS) IS NOT NULL
			SELECT 'PLACA EXISTE' AS 'RESULTADO'
		ELSE
			INSERT INTO BUS(PLACA_BUS,NASIENTO,EST_BUS)
			VALUES(UPPER(@PLACA_BUS),@NASIENTO,@EST_BUS)
	END
GO

/* MODIFICA LOS DATOS REGISTRADOS DEL BUS EN LA BASE DE DATOS */
CREATE PROCEDURE SP_UpdateBus
@COD_BUS INT,
@PLACA_BUS VARCHAR(7),
@NASIENTO VARCHAR(2)
AS
	BEGIN
		UPDATE BUS SET
		PLACA_BUS=UPPER(@PLACA_BUS),NASIENTO=@NASIENTO WHERE COD_BUS=@COD_BUS
	END
GO

/* INACTIVA AL BUS */
CREATE PROCEDURE SP_DeleteBus
@COD_BUS INT
AS
	BEGIN
		UPDATE BUS SET EST_BUS='I'
		WHERE COD_BUS=@COD_BUS
	END
GO

/* PERMITE VER EL LISTADO DE LOS BUSES ACTIVOS */
CREATE PROCEDURE SP_ListBus
AS
	BEGIN
		SELECT * FROM BUS
		WHERE EST_BUS LIKE 'A'
		ORDER BY COD_BUS DESC
	END
GO

/* INSERTA LOS DATOS DE LA RUTA EN LA BASE DE DATOS */
CREATE PROCEDURE SP_InsertRuta
@ORI_RUTA VARCHAR(200),
@DES_RUTA VARCHAR(200),
@COS_RUTA VARCHAR(2),
@EST_RUTA VARCHAR(1)
AS
	BEGIN
		IF(SELECT ORI_RUTA FROM RUTAS WHERE ORI_RUTA = @ORI_RUTA AND DES_RUTA = @DES_RUTA) IS NOT NULL
			SELECT 'RUTA EXISTE' AS 'RESULTADO'
		ELSE
			INSERT INTO RUTAS(ORI_RUTA,DES_RUTA,COS_RUTA,EST_RUTA)
			VALUES(UPPER(@ORI_RUTA),UPPER(@DES_RUTA),@COS_RUTA,@EST_RUTA)
	END
GO

/* MODIFICA LOS DATOS REGISTRADOS DE LA RUTA EN LA BASE DE DATOS */
CREATE PROCEDURE SP_UpdateRuta
@COD_RUTA INT,
@ORI_RUTA VARCHAR(200),
@DES_RUTA VARCHAR(200),
@COS_RUTA VARCHAR(2)
AS
	BEGIN
		UPDATE RUTAS SET
		ORI_RUTA=UPPER(@ORI_RUTA),DES_RUTA=UPPER(@DES_RUTA),COS_RUTA=@COS_RUTA WHERE COD_RUTA=@COD_RUTA
	END
GO

/* INACTIVA LA RUTA */
CREATE PROCEDURE SP_DeleteRuta
@COD_RUTA INT
AS
	BEGIN
		UPDATE RUTAS SET EST_RUTA='I'
		WHERE COD_RUTA=@COD_RUTA
	END
GO

/* PERMITE VER EL LISTADO DE LAS RUTAS ACTIVAS */
CREATE PROCEDURE SP_ListRuta
AS
	BEGIN
		SELECT * FROM RUTAS
		WHERE EST_RUTA LIKE 'A'
		ORDER BY COD_RUTA DESC
	END
GO

/* INSERTA LOS DATOS DE LA SUCURSAL EN LA BASE DE DATOS */
CREATE PROCEDURE SP_InsertSucursal
@NOM_SUC VARCHAR(200),
@EST_SUC VARCHAR(1)
AS
	BEGIN
		IF(SELECT NOM_SUC FROM SUCURSALES WHERE NOM_SUC = @NOM_SUC) IS NOT NULL
			SELECT 'SUCURSAL EXISTENTE' AS 'RESULTADO'
		ELSE
			INSERT INTO SUCURSALES(NOM_SUC,EST_SUC)
			VALUES(UPPER(@NOM_SUC),@EST_SUC)
	END
GO

/* MODIFICA LOS DATOS INGRESADOS DE LAS SUCURSALES EN LA BASE DE DATOS */
CREATE PROCEDURE SP_UpdateSucursal
@COD_SUC INT,
@NOM_SUC VARCHAR(200)
AS
	BEGIN
		UPDATE SUCURSALES SET
		NOM_SUC=UPPER(@NOM_SUC) WHERE COD_SUC=@COD_SUC
	END
GO

/* INACTIVA LA SUCURSAL */
CREATE PROCEDURE SP_DeleteSucursal
@COD_SUC INT
AS
	BEGIN
		UPDATE SUCURSALES SET EST_SUC='I'
		WHERE COD_SUC=@COD_SUC
	END
GO

/* PERMITE VER EL LISTADO DE LAS SUCURSALES ACTIVAS */
CREATE PROCEDURE SP_ListSucursal
AS
	BEGIN
		SELECT * FROM SUCURSALES
		WHERE EST_SUC LIKE 'A'
		ORDER BY COD_SUC DESC
	END
GO

/* INSERTA LOS DATOS DEL BOLETO EN LA BASE DE DATOS */
CREATE PROCEDURE SP_InsertBoleto
@FEC_BOL VARCHAR(10),
@NUM_ASIE VARCHAR(2),
@EST_BOL VARCHAR(1),
@COD_PASJ INT,
@COD_RUTA INT,
@COD_BUS INT
AS
	BEGIN
		IF(SELECT NUM_ASIE FROM BOLETO WHERE NUM_ASIE = @NUM_ASIE AND COD_BUS = @COD_BUS) IS NOT NULL
			SELECT 'BOLETO EXISTENTE' AS 'RESULTADO'
		ELSE
			INSERT INTO BOLETO(FEC_BOL,NUM_ASIE,EST_BOL,COD_PASJ,COD_RUTA,COD_BUS)
			VALUES(CONVERT(DATE, @FEC_BOL, 103),@NUM_ASIE,@EST_BOL,@COD_PASJ,@COD_RUTA,@COD_BUS)
	END
GO

/* MODIFICA LOS DATOS INGRESADOS DEL BOLETO EN LA BASE DE DATOS */
CREATE PROCEDURE SP_UpdateBoleto
@COD_BOL INT,
@FEC_BOL VARCHAR(10),
@NUM_ASIE VARCHAR(2),
@COD_PASJ INT,
@COD_RUTA INT,
@COD_BUS INT
AS
	BEGIN
		UPDATE BOLETO SET
		FEC_BOL=CONVERT(DATE, @FEC_BOL, 103),NUM_ASIE=@NUM_ASIE,COD_PASJ=@COD_PASJ,COD_RUTA=@COD_RUTA,COD_BUS=@COD_BUS
		WHERE COD_BOL=@COD_BOL
	END
GO

/* INACTIVA EL BOLETO */
CREATE PROCEDURE SP_DeleteBoleto
@COD_BOL INT
AS
	BEGIN
		UPDATE BOLETO SET EST_BOL='I'
		WHERE COD_BOL=@COD_BOL
	END
GO

/* PERMITE VER EL LISTADO DE LOS BOLETOS EN LA BASE DE DATOS */
CREATE PROCEDURE SP_ListBoleto
AS
	BEGIN
		SELECT COD_BOL,
			FORMAT(FEC_BOL, 'dd/MM/yyyy') AS 'FEC_BOL',
			NUM_ASIE,
			PASAJERO.COD_PASJ,
			PASAJERO.NOM_PASJ,
			RUTAS.COD_RUTA,
			CONCAT(RUTAS.ORI_RUTA,'-',RUTAS.DES_RUTA) AS RUTA,
			RUTAS.COS_RUTA,
			BUS.COD_BUS,
			BUS.PLACA_BUS
		FROM BOLETO
			INNER JOIN PASAJERO ON PASAJERO.COD_PASJ = BOLETO.COD_PASJ
			INNER JOIN RUTAS ON RUTAS.COD_RUTA = BOLETO.COD_RUTA
			INNER JOIN BUS ON BUS.COD_BUS = BOLETO.COD_BUS
		WHERE EST_BOL LIKE 'A'
		ORDER BY COD_BOL DESC
	END
GO
